/*
 * generated by Xtext
 */
package edu.cmu.sei.eebm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EEBMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RoadmapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Roadmap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameRoadmapKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsIntentionalElementParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Assignment cPeopleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPeopleStakeholderParserRuleCall_2_0 = (RuleCall)cPeopleAssignment_2.eContents().get(0);
		private final Assignment cTrajectoriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTrajectoriesAlternatives_3_0 = (Alternatives)cTrajectoriesAssignment_3.eContents().get(0);
		private final RuleCall cTrajectoriesDecisionParserRuleCall_3_0_0 = (RuleCall)cTrajectoriesAlternatives_3_0.eContents().get(0);
		private final RuleCall cTrajectoriesPathParserRuleCall_3_0_1 = (RuleCall)cTrajectoriesAlternatives_3_0.eContents().get(1);
		
		//Roadmap:
		//	(name="Roadmap" STRING)? components+=IntentionalElement+ people+=Stakeholder+ trajectories+=(Decision | Path)+;
		@Override public ParserRule getRule() { return rule; }

		//(name="Roadmap" STRING)? components+=IntentionalElement+ people+=Stakeholder+ trajectories+=(Decision | Path)+
		public Group getGroup() { return cGroup; }

		//(name="Roadmap" STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//name="Roadmap"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Roadmap"
		public Keyword getNameRoadmapKeyword_0_0_0() { return cNameRoadmapKeyword_0_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//components+=IntentionalElement+
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//IntentionalElement
		public RuleCall getComponentsIntentionalElementParserRuleCall_1_0() { return cComponentsIntentionalElementParserRuleCall_1_0; }

		//people+=Stakeholder+
		public Assignment getPeopleAssignment_2() { return cPeopleAssignment_2; }

		//Stakeholder
		public RuleCall getPeopleStakeholderParserRuleCall_2_0() { return cPeopleStakeholderParserRuleCall_2_0; }

		//trajectories+=(Decision | Path)+
		public Assignment getTrajectoriesAssignment_3() { return cTrajectoriesAssignment_3; }

		//Decision | Path
		public Alternatives getTrajectoriesAlternatives_3_0() { return cTrajectoriesAlternatives_3_0; }

		//Decision
		public RuleCall getTrajectoriesDecisionParserRuleCall_3_0_0() { return cTrajectoriesDecisionParserRuleCall_3_0_0; }

		//Path
		public RuleCall getTrajectoriesPathParserRuleCall_3_0_1() { return cTrajectoriesPathParserRuleCall_3_0_1; }
	}

	public class IntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntentionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// superclass. Implies Goals and Options are semantically equivalent ...
		//IntentionalElement:
		//	Goal | Option;
		@Override public ParserRule getRule() { return rule; }

		//Goal | Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//Goal
		public RuleCall getGoalParserRuleCall_0() { return cGoalParserRuleCall_0; }

		//Option
		public RuleCall getOptionParserRuleCall_1() { return cOptionParserRuleCall_1; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathOptionParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//// should be "roadmap"?
		//Path:
		//	name=ID path+=Option+;
		@Override public ParserRule getRule() { return rule; }

		//name=ID path+=Option+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//path+=Option+
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//Option
		public RuleCall getPathOptionParserRuleCall_1_0() { return cPathOptionParserRuleCall_1_0; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_4_0_0 = (RuleCall)cDescriptionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cRefinesKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRefinesReferenceAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cRefinesReferenceIntentionalElementCrossReference_4_1_1_0 = (CrossReference)cRefinesReferenceAssignment_4_1_1.eContents().get(0);
		private final RuleCall cRefinesReferenceIntentionalElementIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cRefinesReferenceIntentionalElementCrossReference_4_1_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cConflictsKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cConflictsReferenceAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cConflictsReferenceIntentionalElementCrossReference_4_2_1_0 = (CrossReference)cConflictsReferenceAssignment_4_2_1.eContents().get(0);
		private final RuleCall cConflictsReferenceIntentionalElementIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cConflictsReferenceIntentionalElementCrossReference_4_2_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_4_3 = (UnorderedGroup)cUnorderedGroup_4.eContents().get(3);
		private final Keyword cPriorityKeyword_4_3_0 = (Keyword)cUnorderedGroup_4_3.eContents().get(0);
		private final Assignment cPriorityAssignment_4_3_1 = (Assignment)cUnorderedGroup_4_3.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_4_3_1_0 = (RuleCall)cPriorityAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cUnorderedGroup_4.eContents().get(4);
		private final Keyword cTimeKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cTimeAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_4_4_1_0 = (RuleCall)cTimeAssignment_4_4_1.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cUnorderedGroup_4.eContents().get(5);
		private final Keyword cCostKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cCostAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_4_5_1_0 = (RuleCall)cCostAssignment_4_5_1.eContents().get(0);
		private final Group cGroup_4_6 = (Group)cUnorderedGroup_4.eContents().get(6);
		private final Keyword cCompletionKeyword_4_6_0 = (Keyword)cGroup_4_6.eContents().get(0);
		private final Assignment cDateAssignment_4_6_1 = (Assignment)cGroup_4_6.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_4_6_1_0 = (RuleCall)cDateAssignment_4_6_1.eContents().get(0);
		private final Group cGroup_4_7 = (Group)cUnorderedGroup_4.eContents().get(7);
		private final Keyword cDelayCostKeyword_4_7_0 = (Keyword)cGroup_4_7.eContents().get(0);
		private final Assignment cCodAssignment_4_7_1 = (Assignment)cGroup_4_7.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_4_7_1_0 = (RuleCall)cCodAssignment_4_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Options, Decisions, 
		//Option:
		//	"Option" name=QualifiedName (":" title=STRING)? "[" (description=Description? //TODO: Validation should implement what an integer time refelects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("refines" refinesReference+=[IntentionalElement]+)? & ("conflicts" conflictsReference+=[IntentionalElement]+)? &
		//	("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("completion" date=STRING)? &
		//	("delay cost" cod=INT)?) "]";
		@Override public ParserRule getRule() { return rule; }

		//"Option" name=QualifiedName (":" title=STRING)? "[" (description=Description? //TODO: Validation should implement what an integer time refelects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("refines" refinesReference+=[IntentionalElement]+)? & ("conflicts" conflictsReference+=[IntentionalElement]+)? &
		//("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("completion" date=STRING)? &
		//("delay cost" cod=INT)?) "]"
		public Group getGroup() { return cGroup; }

		//"Option"
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//(":" title=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//description=Description? //TODO: Validation should implement what an integer time refelects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("refines" refinesReference+=[IntentionalElement]+)? & ("conflicts" conflictsReference+=[IntentionalElement]+)? &
		//("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("completion" date=STRING)? &
		//("delay cost" cod=INT)?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//description=Description?
		public Assignment getDescriptionAssignment_4_0() { return cDescriptionAssignment_4_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_4_0_0() { return cDescriptionDescriptionParserRuleCall_4_0_0; }

		//("refines" refinesReference+=[IntentionalElement]+)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"refines"
		public Keyword getRefinesKeyword_4_1_0() { return cRefinesKeyword_4_1_0; }

		//refinesReference+=[IntentionalElement]+
		public Assignment getRefinesReferenceAssignment_4_1_1() { return cRefinesReferenceAssignment_4_1_1; }

		//[IntentionalElement]
		public CrossReference getRefinesReferenceIntentionalElementCrossReference_4_1_1_0() { return cRefinesReferenceIntentionalElementCrossReference_4_1_1_0; }

		//ID
		public RuleCall getRefinesReferenceIntentionalElementIDTerminalRuleCall_4_1_1_0_1() { return cRefinesReferenceIntentionalElementIDTerminalRuleCall_4_1_1_0_1; }

		//("conflicts" conflictsReference+=[IntentionalElement]+)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"conflicts"
		public Keyword getConflictsKeyword_4_2_0() { return cConflictsKeyword_4_2_0; }

		//conflictsReference+=[IntentionalElement]+
		public Assignment getConflictsReferenceAssignment_4_2_1() { return cConflictsReferenceAssignment_4_2_1; }

		//[IntentionalElement]
		public CrossReference getConflictsReferenceIntentionalElementCrossReference_4_2_1_0() { return cConflictsReferenceIntentionalElementCrossReference_4_2_1_0; }

		//ID
		public RuleCall getConflictsReferenceIntentionalElementIDTerminalRuleCall_4_2_1_0_1() { return cConflictsReferenceIntentionalElementIDTerminalRuleCall_4_2_1_0_1; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_4_3() { return cUnorderedGroup_4_3; }

		//"priority"
		public Keyword getPriorityKeyword_4_3_0() { return cPriorityKeyword_4_3_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_4_3_1() { return cPriorityAssignment_4_3_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_4_3_1_0() { return cPriorityPriorityEnumEnumRuleCall_4_3_1_0; }

		//("time" time=INT)?
		public Group getGroup_4_4() { return cGroup_4_4; }

		//"time"
		public Keyword getTimeKeyword_4_4_0() { return cTimeKeyword_4_4_0; }

		//time=INT
		public Assignment getTimeAssignment_4_4_1() { return cTimeAssignment_4_4_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_4_4_1_0() { return cTimeINTTerminalRuleCall_4_4_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_4_5() { return cGroup_4_5; }

		//"cost"
		public Keyword getCostKeyword_4_5_0() { return cCostKeyword_4_5_0; }

		//cost=INT
		public Assignment getCostAssignment_4_5_1() { return cCostAssignment_4_5_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_4_5_1_0() { return cCostINTTerminalRuleCall_4_5_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_4_6() { return cGroup_4_6; }

		//"completion"
		public Keyword getCompletionKeyword_4_6_0() { return cCompletionKeyword_4_6_0; }

		//date=STRING
		public Assignment getDateAssignment_4_6_1() { return cDateAssignment_4_6_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_4_6_1_0() { return cDateSTRINGTerminalRuleCall_4_6_1_0; }

		//("delay cost" cod=INT)?
		public Group getGroup_4_7() { return cGroup_4_7; }

		//"delay cost"
		public Keyword getDelayCostKeyword_4_7_0() { return cDelayCostKeyword_4_7_0; }

		//cod=INT
		public Assignment getCodAssignment_4_7_1() { return cCodAssignment_4_7_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_4_7_1_0() { return cCodINTTerminalRuleCall_4_7_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class StakeholderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stakeholder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConsultantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParticipantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// People
		//Stakeholder:
		//	Consultant | Participant;
		@Override public ParserRule getRule() { return rule; }

		//Consultant | Participant
		public Alternatives getAlternatives() { return cAlternatives; }

		//Consultant
		public RuleCall getConsultantParserRuleCall_0() { return cConsultantParserRuleCall_0; }

		//Participant
		public RuleCall getParticipantParserRuleCall_1() { return cParticipantParserRuleCall_1; }
	}

	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Participant");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cParticipantKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cPreferencesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cPreferencesPreferenceParserRuleCall_1_0 = (RuleCall)cPreferencesAssignment_1.eContents().get(0);
		
		//Participant:
		//	"Participant" name=ID & preferences+=Preference?;
		@Override public ParserRule getRule() { return rule; }

		//"Participant" name=ID & preferences+=Preference?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Participant" name=ID
		public Group getGroup_0() { return cGroup_0; }

		//"Participant"
		public Keyword getParticipantKeyword_0_0() { return cParticipantKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//preferences+=Preference?
		public Assignment getPreferencesAssignment_1() { return cPreferencesAssignment_1; }

		//Preference
		public RuleCall getPreferencesPreferenceParserRuleCall_1_0() { return cPreferencesPreferenceParserRuleCall_1_0; }
	}

	public class ConsultantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Consultant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsultantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Consultant:
		//	"Consultant" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"Consultant" name=ID
		public Group getGroup() { return cGroup; }

		//"Consultant"
		public Keyword getConsultantKeyword_0() { return cConsultantKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRationaleKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cRationaleAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cRationaleSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cRationaleAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cResponsibleKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cResponsibleAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cResponsibleStakeholderCrossReference_3_1_1_0 = (CrossReference)cResponsibleAssignment_3_1_1.eContents().get(0);
		private final RuleCall cResponsibleStakeholderIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cResponsibleStakeholderCrossReference_3_1_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cResponseMeasureKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cResponse_measureAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cResponse_measureSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cResponse_measureAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cDueKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cDueAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cDueSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cDueAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cOptionsKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cOptionsAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final CrossReference cOptionsOptionCrossReference_3_4_1_1_0 = (CrossReference)cOptionsAssignment_3_4_1_1.eContents().get(0);
		private final RuleCall cOptionsOptionIDTerminalRuleCall_3_4_1_1_0_1 = (RuleCall)cOptionsOptionCrossReference_3_4_1_1_0.eContents().get(1);
		private final Group cGroup_3_4_1_2 = (Group)cGroup_3_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_4_1_2_0 = (Keyword)cGroup_3_4_1_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3_4_1_2_1 = (Assignment)cGroup_3_4_1_2.eContents().get(1);
		private final CrossReference cOptionsOptionCrossReference_3_4_1_2_1_0 = (CrossReference)cOptionsAssignment_3_4_1_2_1.eContents().get(0);
		private final RuleCall cOptionsOptionIDTerminalRuleCall_3_4_1_2_1_0_1 = (RuleCall)cOptionsOptionCrossReference_3_4_1_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_4_1_3 = (Keyword)cGroup_3_4_1.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Decision:
		//	"Decision" name=ID "[" ("rationale" rationale=STRING //TODO could take this from ALISA Verify
		//	& ("responsible" responsible=[Stakeholder])? & ("response measure" response_measure=STRING)? & ("due" due=STRING)? &
		//	"options:" ("{" options+=[Option] ("," options+=[Option])* "}")?) "]";
		@Override public ParserRule getRule() { return rule; }

		//"Decision" name=ID "[" ("rationale" rationale=STRING //TODO could take this from ALISA Verify
		//& ("responsible" responsible=[Stakeholder])? & ("response measure" response_measure=STRING)? & ("due" due=STRING)? &
		//"options:" ("{" options+=[Option] ("," options+=[Option])* "}")?) "]"
		public Group getGroup() { return cGroup; }

		//"Decision"
		public Keyword getDecisionKeyword_0() { return cDecisionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"rationale" rationale=STRING //TODO could take this from ALISA Verify
		//& ("responsible" responsible=[Stakeholder])? & ("response measure" response_measure=STRING)? & ("due" due=STRING)? &
		//"options:" ("{" options+=[Option] ("," options+=[Option])* "}")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"rationale" rationale=STRING
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"rationale"
		public Keyword getRationaleKeyword_3_0_0() { return cRationaleKeyword_3_0_0; }

		//rationale=STRING
		public Assignment getRationaleAssignment_3_0_1() { return cRationaleAssignment_3_0_1; }

		//STRING
		public RuleCall getRationaleSTRINGTerminalRuleCall_3_0_1_0() { return cRationaleSTRINGTerminalRuleCall_3_0_1_0; }

		//("responsible" responsible=[Stakeholder])?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"responsible"
		public Keyword getResponsibleKeyword_3_1_0() { return cResponsibleKeyword_3_1_0; }

		//responsible=[Stakeholder]
		public Assignment getResponsibleAssignment_3_1_1() { return cResponsibleAssignment_3_1_1; }

		//[Stakeholder]
		public CrossReference getResponsibleStakeholderCrossReference_3_1_1_0() { return cResponsibleStakeholderCrossReference_3_1_1_0; }

		//ID
		public RuleCall getResponsibleStakeholderIDTerminalRuleCall_3_1_1_0_1() { return cResponsibleStakeholderIDTerminalRuleCall_3_1_1_0_1; }

		//("response measure" response_measure=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"response measure"
		public Keyword getResponseMeasureKeyword_3_2_0() { return cResponseMeasureKeyword_3_2_0; }

		//response_measure=STRING
		public Assignment getResponse_measureAssignment_3_2_1() { return cResponse_measureAssignment_3_2_1; }

		//STRING
		public RuleCall getResponse_measureSTRINGTerminalRuleCall_3_2_1_0() { return cResponse_measureSTRINGTerminalRuleCall_3_2_1_0; }

		//("due" due=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"due"
		public Keyword getDueKeyword_3_3_0() { return cDueKeyword_3_3_0; }

		//due=STRING
		public Assignment getDueAssignment_3_3_1() { return cDueAssignment_3_3_1; }

		//STRING
		public RuleCall getDueSTRINGTerminalRuleCall_3_3_1_0() { return cDueSTRINGTerminalRuleCall_3_3_1_0; }

		//"options:" ("{" options+=[Option] ("," options+=[Option])* "}")?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"options:"
		public Keyword getOptionsKeyword_3_4_0() { return cOptionsKeyword_3_4_0; }

		//("{" options+=[Option] ("," options+=[Option])* "}")?
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_4_1_0() { return cLeftCurlyBracketKeyword_3_4_1_0; }

		//options+=[Option]
		public Assignment getOptionsAssignment_3_4_1_1() { return cOptionsAssignment_3_4_1_1; }

		//[Option]
		public CrossReference getOptionsOptionCrossReference_3_4_1_1_0() { return cOptionsOptionCrossReference_3_4_1_1_0; }

		//ID
		public RuleCall getOptionsOptionIDTerminalRuleCall_3_4_1_1_0_1() { return cOptionsOptionIDTerminalRuleCall_3_4_1_1_0_1; }

		//("," options+=[Option])*
		public Group getGroup_3_4_1_2() { return cGroup_3_4_1_2; }

		//","
		public Keyword getCommaKeyword_3_4_1_2_0() { return cCommaKeyword_3_4_1_2_0; }

		//options+=[Option]
		public Assignment getOptionsAssignment_3_4_1_2_1() { return cOptionsAssignment_3_4_1_2_1; }

		//[Option]
		public CrossReference getOptionsOptionCrossReference_3_4_1_2_1_0() { return cOptionsOptionCrossReference_3_4_1_2_1_0; }

		//ID
		public RuleCall getOptionsOptionIDTerminalRuleCall_3_4_1_2_1_0_1() { return cOptionsOptionIDTerminalRuleCall_3_4_1_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4_1_3() { return cRightCurlyBracketKeyword_3_4_1_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PreferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFirstOptionCrossReference_1_0 = (CrossReference)cFirstAssignment_1.eContents().get(0);
		private final RuleCall cFirstOptionIDTerminalRuleCall_1_0_1 = (RuleCall)cFirstOptionCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLastAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLastOptionCrossReference_3_0 = (CrossReference)cLastAssignment_3.eContents().get(0);
		private final RuleCall cLastOptionIDTerminalRuleCall_3_0_1 = (RuleCall)cLastOptionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Goals and requirements
		//Preference:
		//	"prefers(" first=[Option] "," last=[Option] //TODO: verify these exist and are not equal
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//"prefers(" first=[Option] "," last=[Option] //TODO: verify these exist and are not equal
		//")"
		public Group getGroup() { return cGroup; }

		//"prefers("
		public Keyword getPrefersKeyword_0() { return cPrefersKeyword_0; }

		//first=[Option]
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//[Option]
		public CrossReference getFirstOptionCrossReference_1_0() { return cFirstOptionCrossReference_1_0; }

		//ID
		public RuleCall getFirstOptionIDTerminalRuleCall_1_0_1() { return cFirstOptionIDTerminalRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//last=[Option]
		public Assignment getLastAssignment_3() { return cLastAssignment_3; }

		//[Option]
		public CrossReference getLastOptionCrossReference_3_0() { return cLastOptionCrossReference_3_0; }

		//ID
		public RuleCall getLastOptionIDTerminalRuleCall_3_0_1() { return cLastOptionIDTerminalRuleCall_3_0_1; }

		////TODO: verify these exist and are not equal
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cGoalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cRefinesKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cSuperTypeGoalCrossReference_0_3_1_0 = (CrossReference)cSuperTypeAssignment_0_3_1.eContents().get(0);
		private final RuleCall cSuperTypeGoalIDTerminalRuleCall_0_3_1_0_1 = (RuleCall)cSuperTypeGoalCrossReference_0_3_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cDescriptionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_5_0 = (RuleCall)cDescriptionAssignment_0_5.eContents().get(0);
		private final Assignment cRationaleAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRationaleRationaleParserRuleCall_1_0 = (RuleCall)cRationaleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cSeeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cDocumentKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cDocReferenceAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cDocReferenceSTRINGTerminalRuleCall_2_0_2_0 = (RuleCall)cDocReferenceAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		////NE: we could just import this from ALISA
		//Goal:
		//	"Goal" name=QualifiedName (":" title=STRING)? ("refines" superType=[Goal])? // short string for title
		//	"[" description=Description? //	 &(changeUncertainty=Uncertainty)? 
		//	& rationale=Rationale? & ("see" "document" docReference+=STRING)? //the document e.g. business strategy
		//	"]";
		@Override public ParserRule getRule() { return rule; }

		//"Goal" name=QualifiedName (":" title=STRING)? ("refines" superType=[Goal])? // short string for title
		//"[" description=Description? //	 &(changeUncertainty=Uncertainty)? 
		//& rationale=Rationale? & ("see" "document" docReference+=STRING)? //the document e.g. business strategy
		//"]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Goal" name=QualifiedName (":" title=STRING)? ("refines" superType=[Goal])? // short string for title
		//"[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Goal"
		public Keyword getGoalKeyword_0_0() { return cGoalKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//("refines" superType=[Goal])?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"refines"
		public Keyword getRefinesKeyword_0_3_0() { return cRefinesKeyword_0_3_0; }

		//superType=[Goal]
		public Assignment getSuperTypeAssignment_0_3_1() { return cSuperTypeAssignment_0_3_1; }

		//[Goal]
		public CrossReference getSuperTypeGoalCrossReference_0_3_1_0() { return cSuperTypeGoalCrossReference_0_3_1_0; }

		//ID
		public RuleCall getSuperTypeGoalIDTerminalRuleCall_0_3_1_0_1() { return cSuperTypeGoalIDTerminalRuleCall_0_3_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_4() { return cLeftSquareBracketKeyword_0_4; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_5() { return cDescriptionAssignment_0_5; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_5_0() { return cDescriptionDescriptionParserRuleCall_0_5_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_1() { return cRationaleAssignment_1; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_1_0() { return cRationaleRationaleParserRuleCall_1_0; }

		//("see" "document" docReference+=STRING)? //the document e.g. business strategy
		//"]"
		public Group getGroup_2() { return cGroup_2; }

		//("see" "document" docReference+=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"see"
		public Keyword getSeeKeyword_2_0_0() { return cSeeKeyword_2_0_0; }

		//"document"
		public Keyword getDocumentKeyword_2_0_1() { return cDocumentKeyword_2_0_1; }

		//docReference+=STRING
		public Assignment getDocReferenceAssignment_2_0_2() { return cDocReferenceAssignment_2_0_2; }

		//STRING
		public RuleCall getDocReferenceSTRINGTerminalRuleCall_2_0_2_0() { return cDocReferenceSTRINGTerminalRuleCall_2_0_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionDescriptionElementParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//// This comes from ALISA/AADL, and would probably be better taken from there, 
		//// e.g. the AADL properties and unit types. Xbase may have these too. 
		//// @TODO determine what unit types are necessary and where to define them.
		//Description:
		//	"description" description+=DescriptionElement+;
		@Override public ParserRule getRule() { return rule; }

		//"description" description+=DescriptionElement+
		public Group getGroup() { return cGroup; }

		//"description"
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }

		//description+=DescriptionElement+
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//DescriptionElement
		public RuleCall getDescriptionDescriptionElementParserRuleCall_1_0() { return cDescriptionDescriptionElementParserRuleCall_1_0; }
	}

	public class DescriptionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionElement");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//DescriptionElement:
		//	text= //| showValue = ShowValue |thisTarget?='this'| image=ImageReference
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//text= //| showValue = ShowValue |thisTarget?='this'| image=ImageReference
		//STRING
		public Assignment getTextAssignment() { return cTextAssignment; }

		////| showValue = ShowValue |thisTarget?='this'| image=ImageReference
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0() { return cTextSTRINGTerminalRuleCall_0; }
	}

	public class RationaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rationale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRationaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Rationale:
		//	"rationale" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"rationale" text=STRING
		public Group getGroup() { return cGroup; }

		//"rationale"
		public Keyword getRationaleKeyword_0() { return cRationaleKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	
	
	public class PriorityEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PriorityEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDMEDKeyword_1_0 = (Keyword)cMEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOWLOWKeyword_2_0 = (Keyword)cLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PriorityEnum:
		//	HIGH | MED | LOW;
		public EnumRule getRule() { return rule; }

		//HIGH | MED | LOW
		public Alternatives getAlternatives() { return cAlternatives; }

		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }

		//"HIGH"
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }

		//MED
		public EnumLiteralDeclaration getMEDEnumLiteralDeclaration_1() { return cMEDEnumLiteralDeclaration_1; }

		//"MED"
		public Keyword getMEDMEDKeyword_1_0() { return cMEDMEDKeyword_1_0; }

		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_2() { return cLOWEnumLiteralDeclaration_2; }

		//"LOW"
		public Keyword getLOWLOWKeyword_2_0() { return cLOWLOWKeyword_2_0; }
	}
	
	private final RoadmapElements pRoadmap;
	private final IntentionalElementElements pIntentionalElement;
	private final PathElements pPath;
	private final OptionElements pOption;
	private final PriorityEnumElements unknownRulePriorityEnum;
	private final StakeholderElements pStakeholder;
	private final ParticipantElements pParticipant;
	private final ConsultantElements pConsultant;
	private final DecisionElements pDecision;
	private final PreferenceElements pPreference;
	private final GoalElements pGoal;
	private final DescriptionElements pDescription;
	private final DescriptionElementElements pDescriptionElement;
	private final RationaleElements pRationale;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public EEBMGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pRoadmap = new RoadmapElements();
		this.pIntentionalElement = new IntentionalElementElements();
		this.pPath = new PathElements();
		this.pOption = new OptionElements();
		this.unknownRulePriorityEnum = new PriorityEnumElements();
		this.pStakeholder = new StakeholderElements();
		this.pParticipant = new ParticipantElements();
		this.pConsultant = new ConsultantElements();
		this.pDecision = new DecisionElements();
		this.pPreference = new PreferenceElements();
		this.pGoal = new GoalElements();
		this.pDescription = new DescriptionElements();
		this.pDescriptionElement = new DescriptionElementElements();
		this.pRationale = new RationaleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.eebm.EEBM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Roadmap:
	//	(name="Roadmap" STRING)? components+=IntentionalElement+ people+=Stakeholder+ trajectories+=(Decision | Path)+;
	public RoadmapElements getRoadmapAccess() {
		return pRoadmap;
	}
	
	public ParserRule getRoadmapRule() {
		return getRoadmapAccess().getRule();
	}

	//// superclass. Implies Goals and Options are semantically equivalent ...
	//IntentionalElement:
	//	Goal | Option;
	public IntentionalElementElements getIntentionalElementAccess() {
		return pIntentionalElement;
	}
	
	public ParserRule getIntentionalElementRule() {
		return getIntentionalElementAccess().getRule();
	}

	//// should be "roadmap"?
	//Path:
	//	name=ID path+=Option+;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//// Options, Decisions, 
	//Option:
	//	"Option" name=QualifiedName (":" title=STRING)? "[" (description=Description? //TODO: Validation should implement what an integer time refelects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("refines" refinesReference+=[IntentionalElement]+)? & ("conflicts" conflictsReference+=[IntentionalElement]+)? &
	//	("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("completion" date=STRING)? &
	//	("delay cost" cod=INT)?) "]";
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//enum PriorityEnum:
	//	HIGH | MED | LOW;
	public PriorityEnumElements getPriorityEnumAccess() {
		return unknownRulePriorityEnum;
	}
	
	public EnumRule getPriorityEnumRule() {
		return getPriorityEnumAccess().getRule();
	}

	//// People
	//Stakeholder:
	//	Consultant | Participant;
	public StakeholderElements getStakeholderAccess() {
		return pStakeholder;
	}
	
	public ParserRule getStakeholderRule() {
		return getStakeholderAccess().getRule();
	}

	//Participant:
	//	"Participant" name=ID & preferences+=Preference?;
	public ParticipantElements getParticipantAccess() {
		return pParticipant;
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}

	//Consultant:
	//	"Consultant" name=ID;
	public ConsultantElements getConsultantAccess() {
		return pConsultant;
	}
	
	public ParserRule getConsultantRule() {
		return getConsultantAccess().getRule();
	}

	//Decision:
	//	"Decision" name=ID "[" ("rationale" rationale=STRING //TODO could take this from ALISA Verify
	//	& ("responsible" responsible=[Stakeholder])? & ("response measure" response_measure=STRING)? & ("due" due=STRING)? &
	//	"options:" ("{" options+=[Option] ("," options+=[Option])* "}")?) "]";
	public DecisionElements getDecisionAccess() {
		return pDecision;
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}

	////Goals and requirements
	//Preference:
	//	"prefers(" first=[Option] "," last=[Option] //TODO: verify these exist and are not equal
	//	")";
	public PreferenceElements getPreferenceAccess() {
		return pPreference;
	}
	
	public ParserRule getPreferenceRule() {
		return getPreferenceAccess().getRule();
	}

	////NE: we could just import this from ALISA
	//Goal:
	//	"Goal" name=QualifiedName (":" title=STRING)? ("refines" superType=[Goal])? // short string for title
	//	"[" description=Description? //	 &(changeUncertainty=Uncertainty)? 
	//	& rationale=Rationale? & ("see" "document" docReference+=STRING)? //the document e.g. business strategy
	//	"]";
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//// This comes from ALISA/AADL, and would probably be better taken from there, 
	//// e.g. the AADL properties and unit types. Xbase may have these too. 
	//// @TODO determine what unit types are necessary and where to define them.
	//Description:
	//	"description" description+=DescriptionElement+;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//DescriptionElement:
	//	text= //| showValue = ShowValue |thisTarget?='this'| image=ImageReference
	//	STRING;
	public DescriptionElementElements getDescriptionElementAccess() {
		return pDescriptionElement;
	}
	
	public ParserRule getDescriptionElementRule() {
		return getDescriptionElementAccess().getRule();
	}

	//Rationale:
	//	"rationale" text=STRING;
	public RationaleElements getRationaleAccess() {
		return pRationale;
	}
	
	public ParserRule getRationaleRule() {
		return getRationaleAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
