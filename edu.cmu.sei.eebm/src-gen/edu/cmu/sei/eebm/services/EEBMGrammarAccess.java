/*
 * generated by Xtext
 */
package edu.cmu.sei.eebm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EEBMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RoadmapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Roadmap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameRoadmapKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsIntentionalElementParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Assignment cRelationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRelationsAlternatives_2_0 = (Alternatives)cRelationsAssignment_2.eContents().get(0);
		private final RuleCall cRelationsRefinementParserRuleCall_2_0_0 = (RuleCall)cRelationsAlternatives_2_0.eContents().get(0);
		private final RuleCall cRelationsConflictParserRuleCall_2_0_1 = (RuleCall)cRelationsAlternatives_2_0.eContents().get(1);
		
		//Roadmap:
		//	(name="Roadmap" STRING)? components+=IntentionalElement* relations+=(Refinement | Conflict)*;
		@Override public ParserRule getRule() { return rule; }

		//(name="Roadmap" STRING)? components+=IntentionalElement* relations+=(Refinement | Conflict)*
		public Group getGroup() { return cGroup; }

		//(name="Roadmap" STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//name="Roadmap"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Roadmap"
		public Keyword getNameRoadmapKeyword_0_0_0() { return cNameRoadmapKeyword_0_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//components+=IntentionalElement*
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//IntentionalElement
		public RuleCall getComponentsIntentionalElementParserRuleCall_1_0() { return cComponentsIntentionalElementParserRuleCall_1_0; }

		//relations+=(Refinement | Conflict)*
		public Assignment getRelationsAssignment_2() { return cRelationsAssignment_2; }

		//Refinement | Conflict
		public Alternatives getRelationsAlternatives_2_0() { return cRelationsAlternatives_2_0; }

		//Refinement
		public RuleCall getRelationsRefinementParserRuleCall_2_0_0() { return cRelationsRefinementParserRuleCall_2_0_0; }

		//Conflict
		public RuleCall getRelationsConflictParserRuleCall_2_0_1() { return cRelationsConflictParserRuleCall_2_0_1; }
	}

	public class IntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntentionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSoftgoalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// superclass. Implies Goals and Options are semantically equivalent ...
		//IntentionalElement:
		//	Goal | Task | Softgoal;
		@Override public ParserRule getRule() { return rule; }

		//Goal | Task | Softgoal
		public Alternatives getAlternatives() { return cAlternatives; }

		//Goal
		public RuleCall getGoalParserRuleCall_0() { return cGoalParserRuleCall_0; }

		//Task
		public RuleCall getTaskParserRuleCall_1() { return cTaskParserRuleCall_1; }

		//Softgoal
		public RuleCall getSoftgoalParserRuleCall_2() { return cSoftgoalParserRuleCall_2; }
	}

	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refinement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndRefinementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Relationship:
		////	Refinement | Conflict
		////;
		////TODO: validation rule that defines what can be refined/decomposed.
		//// E.g. softgoals refine other Sgs, goals refine goals or softgoals, tasks refine either.
		////Notice there is little to no semantic difference between them!
		//Refinement:
		//	AndRefinement | OrRefinement;
		@Override public ParserRule getRule() { return rule; }

		//AndRefinement | OrRefinement
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndRefinement
		public RuleCall getAndRefinementParserRuleCall_0() { return cAndRefinementParserRuleCall_0; }

		//OrRefinement
		public RuleCall getOrRefinementParserRuleCall_1() { return cOrRefinementParserRuleCall_1; }
	}

	public class AndRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDestKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSourceIntentionalElementCrossReference_3_0_1_0 = (CrossReference)cSourceAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cSourceIntentionalElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSourceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDestAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cDestIntentionalElementParserRuleCall_3_1_2_0 = (RuleCall)cDestAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cDestIntentionalElementParserRuleCall_3_1_3_1_0 = (RuleCall)cDestAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndRefinement:
		//	"And" name=QualifiedName "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement (","
		//	dest+=IntentionalElement)* "]") "]";
		@Override public ParserRule getRule() { return rule; }

		//"And" name=QualifiedName "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement (","
		//dest+=IntentionalElement)* "]") "]"
		public Group getGroup() { return cGroup; }

		//"And"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement ("," dest+=IntentionalElement)* "]"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"dest" source+=[IntentionalElement]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"dest"
		public Keyword getDestKeyword_3_0_0() { return cDestKeyword_3_0_0; }

		//source+=[IntentionalElement]
		public Assignment getSourceAssignment_3_0_1() { return cSourceAssignment_3_0_1; }

		//[IntentionalElement]
		public CrossReference getSourceIntentionalElementCrossReference_3_0_1_0() { return cSourceIntentionalElementCrossReference_3_0_1_0; }

		//ID
		public RuleCall getSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1() { return cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1; }

		//"source" "[" dest+=IntentionalElement ("," dest+=IntentionalElement)* "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"source"
		public Keyword getSourceKeyword_3_1_0() { return cSourceKeyword_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_1() { return cLeftSquareBracketKeyword_3_1_1; }

		//dest+=IntentionalElement
		public Assignment getDestAssignment_3_1_2() { return cDestAssignment_3_1_2; }

		//IntentionalElement
		public RuleCall getDestIntentionalElementParserRuleCall_3_1_2_0() { return cDestIntentionalElementParserRuleCall_3_1_2_0; }

		//("," dest+=IntentionalElement)*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//dest+=IntentionalElement
		public Assignment getDestAssignment_3_1_3_1() { return cDestAssignment_3_1_3_1; }

		//IntentionalElement
		public RuleCall getDestIntentionalElementParserRuleCall_3_1_3_1_0() { return cDestIntentionalElementParserRuleCall_3_1_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_4() { return cRightSquareBracketKeyword_3_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class OrRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDestKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSourceIntentionalElementCrossReference_3_0_1_0 = (CrossReference)cSourceAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cSourceIntentionalElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSourceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDestAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cDestIntentionalElementParserRuleCall_3_1_2_0 = (RuleCall)cDestAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cDestIntentionalElementParserRuleCall_3_1_3_1_0 = (RuleCall)cDestAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrRefinement:
		//	"Or" name=QualifiedName "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement (","
		//	dest+=IntentionalElement)* "]") "]";
		@Override public ParserRule getRule() { return rule; }

		//"Or" name=QualifiedName "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement (","
		//dest+=IntentionalElement)* "]") "]"
		public Group getGroup() { return cGroup; }

		//"Or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement ("," dest+=IntentionalElement)* "]"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"dest" source+=[IntentionalElement]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"dest"
		public Keyword getDestKeyword_3_0_0() { return cDestKeyword_3_0_0; }

		//source+=[IntentionalElement]
		public Assignment getSourceAssignment_3_0_1() { return cSourceAssignment_3_0_1; }

		//[IntentionalElement]
		public CrossReference getSourceIntentionalElementCrossReference_3_0_1_0() { return cSourceIntentionalElementCrossReference_3_0_1_0; }

		//ID
		public RuleCall getSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1() { return cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1; }

		//"source" "[" dest+=IntentionalElement ("," dest+=IntentionalElement)* "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"source"
		public Keyword getSourceKeyword_3_1_0() { return cSourceKeyword_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_1() { return cLeftSquareBracketKeyword_3_1_1; }

		//dest+=IntentionalElement
		public Assignment getDestAssignment_3_1_2() { return cDestAssignment_3_1_2; }

		//IntentionalElement
		public RuleCall getDestIntentionalElementParserRuleCall_3_1_2_0() { return cDestIntentionalElementParserRuleCall_3_1_2_0; }

		//("," dest+=IntentionalElement)*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//dest+=IntentionalElement
		public Assignment getDestAssignment_3_1_3_1() { return cDestAssignment_3_1_3_1; }

		//IntentionalElement
		public RuleCall getDestIntentionalElementParserRuleCall_3_1_3_1_0() { return cDestIntentionalElementParserRuleCall_3_1_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_4() { return cRightSquareBracketKeyword_3_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ConflictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conflict");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConflictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDestKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSourceIntentionalElementParserRuleCall_3_0_1_0 = (RuleCall)cSourceAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSourceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDestAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDestIntentionalElementParserRuleCall_3_1_1_0 = (RuleCall)cDestAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conflict:
		//	"Conflict" name=QualifiedName "[" ("dest" source=IntentionalElement & "source" dest=IntentionalElement) "]";
		@Override public ParserRule getRule() { return rule; }

		//"Conflict" name=QualifiedName "[" ("dest" source=IntentionalElement & "source" dest=IntentionalElement) "]"
		public Group getGroup() { return cGroup; }

		//"Conflict"
		public Keyword getConflictKeyword_0() { return cConflictKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"dest" source=IntentionalElement & "source" dest=IntentionalElement
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"dest" source=IntentionalElement
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"dest"
		public Keyword getDestKeyword_3_0_0() { return cDestKeyword_3_0_0; }

		//source=IntentionalElement
		public Assignment getSourceAssignment_3_0_1() { return cSourceAssignment_3_0_1; }

		//IntentionalElement
		public RuleCall getSourceIntentionalElementParserRuleCall_3_0_1_0() { return cSourceIntentionalElementParserRuleCall_3_0_1_0; }

		//"source" dest=IntentionalElement
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"source"
		public Keyword getSourceKeyword_3_1_0() { return cSourceKeyword_3_1_0; }

		//dest=IntentionalElement
		public Assignment getDestAssignment_3_1_1() { return cDestAssignment_3_1_1; }

		//IntentionalElement
		public RuleCall getDestIntentionalElementParserRuleCall_3_1_1_0() { return cDestIntentionalElementParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cGoalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDescriptionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_4_0 = (RuleCall)cDescriptionAssignment_0_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cUnorderedGroup.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cPriorityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_1_1_0 = (RuleCall)cPriorityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCostAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_3_1_0 = (RuleCall)cCostAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cBenefitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBenefitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBenefitINTTerminalRuleCall_4_1_0 = (RuleCall)cBenefitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cCompletionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDateAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cDelayCostKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCodAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_6_1_0 = (RuleCall)cCodAssignment_6_1.eContents().get(0);
		private final Assignment cRationaleAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cRationaleRationaleParserRuleCall_7_0 = (RuleCall)cRationaleAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cUnorderedGroup.eContents().get(8);
		private final Assignment cRefAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cRefReferenceParserRuleCall_8_0_0 = (RuleCall)cRefAssignment_8_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Goal:
		//	"Goal" name=QualifiedName (":" title=STRING)? // short string for title
		//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? "]";
		@Override public ParserRule getRule() { return rule; }

		//"Goal" name=QualifiedName (":" title=STRING)? // short string for title
		//"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? "]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Goal" name=QualifiedName (":" title=STRING)? // short string for title
		//"[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Goal"
		public Keyword getGoalKeyword_0_0() { return cGoalKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_3() { return cLeftSquareBracketKeyword_0_3; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_4() { return cDescriptionAssignment_0_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_4_0() { return cDescriptionDescriptionParserRuleCall_0_4_0; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_1_1() { return cPriorityAssignment_1_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_1_1_0() { return cPriorityPriorityEnumEnumRuleCall_1_1_0; }

		//("time" time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"cost"
		public Keyword getCostKeyword_3_0() { return cCostKeyword_3_0; }

		//cost=INT
		public Assignment getCostAssignment_3_1() { return cCostAssignment_3_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_3_1_0() { return cCostINTTerminalRuleCall_3_1_0; }

		//("benefit" benefit=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"benefit"
		public Keyword getBenefitKeyword_4_0() { return cBenefitKeyword_4_0; }

		//benefit=INT
		public Assignment getBenefitAssignment_4_1() { return cBenefitAssignment_4_1; }

		//INT
		public RuleCall getBenefitINTTerminalRuleCall_4_1_0() { return cBenefitINTTerminalRuleCall_4_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"completion"
		public Keyword getCompletionKeyword_5_0() { return cCompletionKeyword_5_0; }

		//date=STRING
		public Assignment getDateAssignment_5_1() { return cDateAssignment_5_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_1_0() { return cDateSTRINGTerminalRuleCall_5_1_0; }

		//("delay cost" cod=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"delay cost"
		public Keyword getDelayCostKeyword_6_0() { return cDelayCostKeyword_6_0; }

		//cod=INT
		public Assignment getCodAssignment_6_1() { return cCodAssignment_6_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_6_1_0() { return cCodINTTerminalRuleCall_6_1_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_7() { return cRationaleAssignment_7; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_7_0() { return cRationaleRationaleParserRuleCall_7_0; }

		//ref=Reference? "]"
		public Group getGroup_8() { return cGroup_8; }

		//ref=Reference?
		public Assignment getRefAssignment_8_0() { return cRefAssignment_8_0; }

		//Reference
		public RuleCall getRefReferenceParserRuleCall_8_0_0() { return cRefReferenceParserRuleCall_8_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8_1() { return cRightSquareBracketKeyword_8_1; }
	}

	public class SoftgoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Softgoal");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cSoftgoalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDescriptionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_4_0 = (RuleCall)cDescriptionAssignment_0_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cUnorderedGroup.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cPriorityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_1_1_0 = (RuleCall)cPriorityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCostAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_3_1_0 = (RuleCall)cCostAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cBenefitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBenefitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBenefitINTTerminalRuleCall_4_1_0 = (RuleCall)cBenefitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cCompletionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDateAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cDelayCostKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCodAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_6_1_0 = (RuleCall)cCodAssignment_6_1.eContents().get(0);
		private final Assignment cRationaleAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cRationaleRationaleParserRuleCall_7_0 = (RuleCall)cRationaleAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cUnorderedGroup.eContents().get(8);
		private final Assignment cRefAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cRefReferenceParserRuleCall_8_0_0 = (RuleCall)cRefAssignment_8_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Softgoal:
		//	"Softgoal" name=QualifiedName (":" title=STRING)? // short string for title
		//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? //the document e.g. business strategy
		//	"]";
		@Override public ParserRule getRule() { return rule; }

		//"Softgoal" name=QualifiedName (":" title=STRING)? // short string for title
		//"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? //the document e.g. business strategy
		//"]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Softgoal" name=QualifiedName (":" title=STRING)? // short string for title
		//"[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Softgoal"
		public Keyword getSoftgoalKeyword_0_0() { return cSoftgoalKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_3() { return cLeftSquareBracketKeyword_0_3; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_4() { return cDescriptionAssignment_0_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_4_0() { return cDescriptionDescriptionParserRuleCall_0_4_0; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_1_1() { return cPriorityAssignment_1_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_1_1_0() { return cPriorityPriorityEnumEnumRuleCall_1_1_0; }

		//("time" time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"cost"
		public Keyword getCostKeyword_3_0() { return cCostKeyword_3_0; }

		//cost=INT
		public Assignment getCostAssignment_3_1() { return cCostAssignment_3_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_3_1_0() { return cCostINTTerminalRuleCall_3_1_0; }

		//("benefit" benefit=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"benefit"
		public Keyword getBenefitKeyword_4_0() { return cBenefitKeyword_4_0; }

		//benefit=INT
		public Assignment getBenefitAssignment_4_1() { return cBenefitAssignment_4_1; }

		//INT
		public RuleCall getBenefitINTTerminalRuleCall_4_1_0() { return cBenefitINTTerminalRuleCall_4_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"completion"
		public Keyword getCompletionKeyword_5_0() { return cCompletionKeyword_5_0; }

		//date=STRING
		public Assignment getDateAssignment_5_1() { return cDateAssignment_5_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_1_0() { return cDateSTRINGTerminalRuleCall_5_1_0; }

		//("delay cost" cod=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"delay cost"
		public Keyword getDelayCostKeyword_6_0() { return cDelayCostKeyword_6_0; }

		//cod=INT
		public Assignment getCodAssignment_6_1() { return cCodAssignment_6_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_6_1_0() { return cCodINTTerminalRuleCall_6_1_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_7() { return cRationaleAssignment_7; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_7_0() { return cRationaleRationaleParserRuleCall_7_0; }

		//ref=Reference? //the document e.g. business strategy
		//"]"
		public Group getGroup_8() { return cGroup_8; }

		//ref=Reference?
		public Assignment getRefAssignment_8_0() { return cRefAssignment_8_0; }

		//Reference
		public RuleCall getRefReferenceParserRuleCall_8_0_0() { return cRefReferenceParserRuleCall_8_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8_1() { return cRightSquareBracketKeyword_8_1; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cTaskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDescriptionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_4_0 = (RuleCall)cDescriptionAssignment_0_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cUnorderedGroup.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cPriorityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_1_1_0 = (RuleCall)cPriorityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCostAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_3_1_0 = (RuleCall)cCostAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cBenefitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBenefitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBenefitINTTerminalRuleCall_4_1_0 = (RuleCall)cBenefitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cCompletionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDateAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cDelayCostKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cCodAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_6_0_1_0 = (RuleCall)cCodAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Task:
		//	"Task" name=QualifiedName (":" title=STRING)? "[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//	("completion" date=STRING)? & ("delay cost" cod=INT)? "]";
		@Override public ParserRule getRule() { return rule; }

		//"Task" name=QualifiedName (":" title=STRING)? "[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//("completion" date=STRING)? & ("delay cost" cod=INT)? "]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Task" name=QualifiedName (":" title=STRING)? "[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Task"
		public Keyword getTaskKeyword_0_0() { return cTaskKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_3() { return cLeftSquareBracketKeyword_0_3; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_4() { return cDescriptionAssignment_0_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_4_0() { return cDescriptionDescriptionParserRuleCall_0_4_0; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_1_1() { return cPriorityAssignment_1_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_1_1_0() { return cPriorityPriorityEnumEnumRuleCall_1_1_0; }

		//("time" time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"cost"
		public Keyword getCostKeyword_3_0() { return cCostKeyword_3_0; }

		//cost=INT
		public Assignment getCostAssignment_3_1() { return cCostAssignment_3_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_3_1_0() { return cCostINTTerminalRuleCall_3_1_0; }

		//("benefit" benefit=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"benefit"
		public Keyword getBenefitKeyword_4_0() { return cBenefitKeyword_4_0; }

		//benefit=INT
		public Assignment getBenefitAssignment_4_1() { return cBenefitAssignment_4_1; }

		//INT
		public RuleCall getBenefitINTTerminalRuleCall_4_1_0() { return cBenefitINTTerminalRuleCall_4_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"completion"
		public Keyword getCompletionKeyword_5_0() { return cCompletionKeyword_5_0; }

		//date=STRING
		public Assignment getDateAssignment_5_1() { return cDateAssignment_5_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_1_0() { return cDateSTRINGTerminalRuleCall_5_1_0; }

		//("delay cost" cod=INT)? "]"
		public Group getGroup_6() { return cGroup_6; }

		//("delay cost" cod=INT)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"delay cost"
		public Keyword getDelayCostKeyword_6_0_0() { return cDelayCostKeyword_6_0_0; }

		//cod=INT
		public Assignment getCodAssignment_6_0_1() { return cCodAssignment_6_0_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_6_0_1_0() { return cCodINTTerminalRuleCall_6_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Description:
		//	"description" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"description" text=STRING
		public Group getGroup() { return cGroup; }

		//"description"
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class RationaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rationale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRationaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Rationale:
		//	"rationale" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"rationale" text=STRING
		public Group getGroup() { return cGroup; }

		//"rationale"
		public Keyword getRationaleKeyword_0() { return cRationaleKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeeDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDocReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocReferenceSTRINGTerminalRuleCall_1_0 = (RuleCall)cDocReferenceAssignment_1.eContents().get(0);
		
		//Reference:
		//	"see document" docReference+=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"see document" docReference+=STRING
		public Group getGroup() { return cGroup; }

		//"see document"
		public Keyword getSeeDocumentKeyword_0() { return cSeeDocumentKeyword_0; }

		//docReference+=STRING
		public Assignment getDocReferenceAssignment_1() { return cDocReferenceAssignment_1; }

		//STRING
		public RuleCall getDocReferenceSTRINGTerminalRuleCall_1_0() { return cDocReferenceSTRINGTerminalRuleCall_1_0; }
	}

	public class PreferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFirstIntentionalElementCrossReference_1_0 = (CrossReference)cFirstAssignment_1.eContents().get(0);
		private final RuleCall cFirstIntentionalElementIDTerminalRuleCall_1_0_1 = (RuleCall)cFirstIntentionalElementCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLastAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLastIntentionalElementCrossReference_3_0 = (CrossReference)cLastAssignment_3.eContents().get(0);
		private final RuleCall cLastIntentionalElementIDTerminalRuleCall_3_0_1 = (RuleCall)cLastIntentionalElementCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODO: Semantic validation that first/last exist and are not equal
		//Preference:
		//	"prefers(" first=[IntentionalElement] "," last=[IntentionalElement] ")";
		@Override public ParserRule getRule() { return rule; }

		//"prefers(" first=[IntentionalElement] "," last=[IntentionalElement] ")"
		public Group getGroup() { return cGroup; }

		//"prefers("
		public Keyword getPrefersKeyword_0() { return cPrefersKeyword_0; }

		//first=[IntentionalElement]
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//[IntentionalElement]
		public CrossReference getFirstIntentionalElementCrossReference_1_0() { return cFirstIntentionalElementCrossReference_1_0; }

		//ID
		public RuleCall getFirstIntentionalElementIDTerminalRuleCall_1_0_1() { return cFirstIntentionalElementIDTerminalRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//last=[IntentionalElement]
		public Assignment getLastAssignment_3() { return cLastAssignment_3; }

		//[IntentionalElement]
		public CrossReference getLastIntentionalElementCrossReference_3_0() { return cLastIntentionalElementCrossReference_3_0; }

		//ID
		public RuleCall getLastIntentionalElementIDTerminalRuleCall_3_0_1() { return cLastIntentionalElementIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class PriorityEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PriorityEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDMEDKeyword_1_0 = (Keyword)cMEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOWLOWKeyword_2_0 = (Keyword)cLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PriorityEnum:
		//	HIGH | MED | LOW;
		public EnumRule getRule() { return rule; }

		//HIGH | MED | LOW
		public Alternatives getAlternatives() { return cAlternatives; }

		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }

		//"HIGH"
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }

		//MED
		public EnumLiteralDeclaration getMEDEnumLiteralDeclaration_1() { return cMEDEnumLiteralDeclaration_1; }

		//"MED"
		public Keyword getMEDMEDKeyword_1_0() { return cMEDMEDKeyword_1_0; }

		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_2() { return cLOWEnumLiteralDeclaration_2; }

		//"LOW"
		public Keyword getLOWLOWKeyword_2_0() { return cLOWLOWKeyword_2_0; }
	}
	
	private final RoadmapElements pRoadmap;
	private final IntentionalElementElements pIntentionalElement;
	private final RefinementElements pRefinement;
	private final AndRefinementElements pAndRefinement;
	private final OrRefinementElements pOrRefinement;
	private final ConflictElements pConflict;
	private final GoalElements pGoal;
	private final SoftgoalElements pSoftgoal;
	private final TaskElements pTask;
	private final DescriptionElements pDescription;
	private final RationaleElements pRationale;
	private final ReferenceElements pReference;
	private final PriorityEnumElements unknownRulePriorityEnum;
	private final PreferenceElements pPreference;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public EEBMGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pRoadmap = new RoadmapElements();
		this.pIntentionalElement = new IntentionalElementElements();
		this.pRefinement = new RefinementElements();
		this.pAndRefinement = new AndRefinementElements();
		this.pOrRefinement = new OrRefinementElements();
		this.pConflict = new ConflictElements();
		this.pGoal = new GoalElements();
		this.pSoftgoal = new SoftgoalElements();
		this.pTask = new TaskElements();
		this.pDescription = new DescriptionElements();
		this.pRationale = new RationaleElements();
		this.pReference = new ReferenceElements();
		this.unknownRulePriorityEnum = new PriorityEnumElements();
		this.pPreference = new PreferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.eebm.EEBM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Roadmap:
	//	(name="Roadmap" STRING)? components+=IntentionalElement* relations+=(Refinement | Conflict)*;
	public RoadmapElements getRoadmapAccess() {
		return pRoadmap;
	}
	
	public ParserRule getRoadmapRule() {
		return getRoadmapAccess().getRule();
	}

	//// superclass. Implies Goals and Options are semantically equivalent ...
	//IntentionalElement:
	//	Goal | Task | Softgoal;
	public IntentionalElementElements getIntentionalElementAccess() {
		return pIntentionalElement;
	}
	
	public ParserRule getIntentionalElementRule() {
		return getIntentionalElementAccess().getRule();
	}

	////Relationship:
	////	Refinement | Conflict
	////;
	////TODO: validation rule that defines what can be refined/decomposed.
	//// E.g. softgoals refine other Sgs, goals refine goals or softgoals, tasks refine either.
	////Notice there is little to no semantic difference between them!
	//Refinement:
	//	AndRefinement | OrRefinement;
	public RefinementElements getRefinementAccess() {
		return pRefinement;
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}

	//AndRefinement:
	//	"And" name=QualifiedName "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement (","
	//	dest+=IntentionalElement)* "]") "]";
	public AndRefinementElements getAndRefinementAccess() {
		return pAndRefinement;
	}
	
	public ParserRule getAndRefinementRule() {
		return getAndRefinementAccess().getRule();
	}

	//OrRefinement:
	//	"Or" name=QualifiedName "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=IntentionalElement (","
	//	dest+=IntentionalElement)* "]") "]";
	public OrRefinementElements getOrRefinementAccess() {
		return pOrRefinement;
	}
	
	public ParserRule getOrRefinementRule() {
		return getOrRefinementAccess().getRule();
	}

	//Conflict:
	//	"Conflict" name=QualifiedName "[" ("dest" source=IntentionalElement & "source" dest=IntentionalElement) "]";
	public ConflictElements getConflictAccess() {
		return pConflict;
	}
	
	public ParserRule getConflictRule() {
		return getConflictAccess().getRule();
	}

	//Goal:
	//	"Goal" name=QualifiedName (":" title=STRING)? // short string for title
	//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
	//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? "]";
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//Softgoal:
	//	"Softgoal" name=QualifiedName (":" title=STRING)? // short string for title
	//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
	//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? //the document e.g. business strategy
	//	"]";
	public SoftgoalElements getSoftgoalAccess() {
		return pSoftgoal;
	}
	
	public ParserRule getSoftgoalRule() {
		return getSoftgoalAccess().getRule();
	}

	//Task:
	//	"Task" name=QualifiedName (":" title=STRING)? "[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
	//	("completion" date=STRING)? & ("delay cost" cod=INT)? "]";
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//Description:
	//	"description" text=STRING;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//Rationale:
	//	"rationale" text=STRING;
	public RationaleElements getRationaleAccess() {
		return pRationale;
	}
	
	public ParserRule getRationaleRule() {
		return getRationaleAccess().getRule();
	}

	//Reference:
	//	"see document" docReference+=STRING;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//enum PriorityEnum:
	//	HIGH | MED | LOW;
	public PriorityEnumElements getPriorityEnumAccess() {
		return unknownRulePriorityEnum;
	}
	
	public EnumRule getPriorityEnumRule() {
		return getPriorityEnumAccess().getRule();
	}

	////TODO: Semantic validation that first/last exist and are not equal
	//Preference:
	//	"prefers(" first=[IntentionalElement] "," last=[IntentionalElement] ")";
	public PreferenceElements getPreferenceAccess() {
		return pPreference;
	}
	
	public ParserRule getPreferenceRule() {
		return getPreferenceAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
