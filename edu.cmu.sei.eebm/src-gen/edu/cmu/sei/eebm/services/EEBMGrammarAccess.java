/*
 * generated by Xtext
 */
package edu.cmu.sei.eebm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EEBMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RoadmapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Roadmap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameRoadmapKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsIntentionalElementParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Assignment cRelationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRelationsAlternatives_2_0 = (Alternatives)cRelationsAssignment_2.eContents().get(0);
		private final RuleCall cRelationsRefinementParserRuleCall_2_0_0 = (RuleCall)cRelationsAlternatives_2_0.eContents().get(0);
		private final RuleCall cRelationsConflictParserRuleCall_2_0_1 = (RuleCall)cRelationsAlternatives_2_0.eContents().get(1);
		
		////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
		////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
		////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
		//Roadmap:
		//	(name="Roadmap" STRING)? components+=IntentionalElement* relations+=(Refinement | Conflict)*;
		@Override public ParserRule getRule() { return rule; }

		//(name="Roadmap" STRING)? components+=IntentionalElement* relations+=(Refinement | Conflict)*
		public Group getGroup() { return cGroup; }

		//(name="Roadmap" STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//name="Roadmap"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Roadmap"
		public Keyword getNameRoadmapKeyword_0_0_0() { return cNameRoadmapKeyword_0_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//components+=IntentionalElement*
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//IntentionalElement
		public RuleCall getComponentsIntentionalElementParserRuleCall_1_0() { return cComponentsIntentionalElementParserRuleCall_1_0; }

		//relations+=(Refinement | Conflict)*
		public Assignment getRelationsAssignment_2() { return cRelationsAssignment_2; }

		//Refinement | Conflict
		public Alternatives getRelationsAlternatives_2_0() { return cRelationsAlternatives_2_0; }

		//Refinement
		public RuleCall getRelationsRefinementParserRuleCall_2_0_0() { return cRelationsRefinementParserRuleCall_2_0_0; }

		//Conflict
		public RuleCall getRelationsConflictParserRuleCall_2_0_1() { return cRelationsConflictParserRuleCall_2_0_1; }
	}

	public class IntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntentionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSoftgoalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// superclass. Implies Goals and Options are semantically equivalent ...
		//IntentionalElement:
		//	Goal | Task | Softgoal;
		@Override public ParserRule getRule() { return rule; }

		//Goal | Task | Softgoal
		public Alternatives getAlternatives() { return cAlternatives; }

		//Goal
		public RuleCall getGoalParserRuleCall_0() { return cGoalParserRuleCall_0; }

		//Task
		public RuleCall getTaskParserRuleCall_1() { return cTaskParserRuleCall_1; }

		//Softgoal
		public RuleCall getSoftgoalParserRuleCall_2() { return cSoftgoalParserRuleCall_2; }
	}

	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refinement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndRefinementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Relationship:
		////	Refinement | Conflict
		////;
		////TODO: validation rule that defines what can be refined/decomposed.
		//// E.g. softgoals refine other Sgs, goals refine goals or softgoals, tasks refine either.
		////Notice there is little to no semantic difference between them!
		//Refinement:
		//	AndRefinement | OrRefinement;
		@Override public ParserRule getRule() { return rule; }

		//AndRefinement | OrRefinement
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndRefinement
		public RuleCall getAndRefinementParserRuleCall_0() { return cAndRefinementParserRuleCall_0; }

		//OrRefinement
		public RuleCall getOrRefinementParserRuleCall_1() { return cOrRefinementParserRuleCall_1; }
	}

	public class AndRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDestKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSourceIntentionalElementCrossReference_3_0_1_0 = (CrossReference)cSourceAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cSourceIntentionalElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSourceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDestAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cDestIntentionalElementCrossReference_3_1_2_0 = (CrossReference)cDestAssignment_3_1_2.eContents().get(0);
		private final RuleCall cDestIntentionalElementIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_1_2_0.eContents().get(1);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final CrossReference cDestIntentionalElementCrossReference_3_1_3_1_0 = (CrossReference)cDestAssignment_3_1_3_1.eContents().get(0);
		private final RuleCall cDestIntentionalElementIDTerminalRuleCall_3_1_3_1_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_1_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndRefinement:
		//	"And" name=ID "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] (","
		//	dest+=[IntentionalElement])* "]") "]";
		@Override public ParserRule getRule() { return rule; }

		//"And" name=ID "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] (","
		//dest+=[IntentionalElement])* "]") "]"
		public Group getGroup() { return cGroup; }

		//"And"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"dest" source+=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] ("," dest+=[IntentionalElement])* "]"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"dest" source+=[IntentionalElement]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"dest"
		public Keyword getDestKeyword_3_0_0() { return cDestKeyword_3_0_0; }

		//source+=[IntentionalElement]
		public Assignment getSourceAssignment_3_0_1() { return cSourceAssignment_3_0_1; }

		//[IntentionalElement]
		public CrossReference getSourceIntentionalElementCrossReference_3_0_1_0() { return cSourceIntentionalElementCrossReference_3_0_1_0; }

		//ID
		public RuleCall getSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1() { return cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1; }

		//"source" "[" dest+=[IntentionalElement] ("," dest+=[IntentionalElement])* "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"source"
		public Keyword getSourceKeyword_3_1_0() { return cSourceKeyword_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_1() { return cLeftSquareBracketKeyword_3_1_1; }

		//dest+=[IntentionalElement]
		public Assignment getDestAssignment_3_1_2() { return cDestAssignment_3_1_2; }

		//[IntentionalElement]
		public CrossReference getDestIntentionalElementCrossReference_3_1_2_0() { return cDestIntentionalElementCrossReference_3_1_2_0; }

		//ID
		public RuleCall getDestIntentionalElementIDTerminalRuleCall_3_1_2_0_1() { return cDestIntentionalElementIDTerminalRuleCall_3_1_2_0_1; }

		//("," dest+=[IntentionalElement])*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//dest+=[IntentionalElement]
		public Assignment getDestAssignment_3_1_3_1() { return cDestAssignment_3_1_3_1; }

		//[IntentionalElement]
		public CrossReference getDestIntentionalElementCrossReference_3_1_3_1_0() { return cDestIntentionalElementCrossReference_3_1_3_1_0; }

		//ID
		public RuleCall getDestIntentionalElementIDTerminalRuleCall_3_1_3_1_0_1() { return cDestIntentionalElementIDTerminalRuleCall_3_1_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_4() { return cRightSquareBracketKeyword_3_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class OrRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDestKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSourceIntentionalElementCrossReference_3_0_1_0 = (CrossReference)cSourceAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cSourceIntentionalElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSourceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDestAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cDestIntentionalElementCrossReference_3_1_2_0 = (CrossReference)cDestAssignment_3_1_2.eContents().get(0);
		private final RuleCall cDestIntentionalElementIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_1_2_0.eContents().get(1);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final CrossReference cDestIntentionalElementCrossReference_3_1_3_1_0 = (CrossReference)cDestAssignment_3_1_3_1.eContents().get(0);
		private final RuleCall cDestIntentionalElementIDTerminalRuleCall_3_1_3_1_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_1_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrRefinement:
		//	"Or" name=ID "[" ("dest" source=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] (","
		//	dest+=[IntentionalElement])* "]") "]";
		@Override public ParserRule getRule() { return rule; }

		//"Or" name=ID "[" ("dest" source=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] (","
		//dest+=[IntentionalElement])* "]") "]"
		public Group getGroup() { return cGroup; }

		//"Or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"dest" source=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] ("," dest+=[IntentionalElement])* "]"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"dest" source=[IntentionalElement]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"dest"
		public Keyword getDestKeyword_3_0_0() { return cDestKeyword_3_0_0; }

		//source=[IntentionalElement]
		public Assignment getSourceAssignment_3_0_1() { return cSourceAssignment_3_0_1; }

		//[IntentionalElement]
		public CrossReference getSourceIntentionalElementCrossReference_3_0_1_0() { return cSourceIntentionalElementCrossReference_3_0_1_0; }

		//ID
		public RuleCall getSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1() { return cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1; }

		//"source" "[" dest+=[IntentionalElement] ("," dest+=[IntentionalElement])* "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"source"
		public Keyword getSourceKeyword_3_1_0() { return cSourceKeyword_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_1() { return cLeftSquareBracketKeyword_3_1_1; }

		//dest+=[IntentionalElement]
		public Assignment getDestAssignment_3_1_2() { return cDestAssignment_3_1_2; }

		//[IntentionalElement]
		public CrossReference getDestIntentionalElementCrossReference_3_1_2_0() { return cDestIntentionalElementCrossReference_3_1_2_0; }

		//ID
		public RuleCall getDestIntentionalElementIDTerminalRuleCall_3_1_2_0_1() { return cDestIntentionalElementIDTerminalRuleCall_3_1_2_0_1; }

		//("," dest+=[IntentionalElement])*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//dest+=[IntentionalElement]
		public Assignment getDestAssignment_3_1_3_1() { return cDestAssignment_3_1_3_1; }

		//[IntentionalElement]
		public CrossReference getDestIntentionalElementCrossReference_3_1_3_1_0() { return cDestIntentionalElementCrossReference_3_1_3_1_0; }

		//ID
		public RuleCall getDestIntentionalElementIDTerminalRuleCall_3_1_3_1_0_1() { return cDestIntentionalElementIDTerminalRuleCall_3_1_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_4() { return cRightSquareBracketKeyword_3_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ConflictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conflict");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConflictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDestKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSourceIntentionalElementCrossReference_3_0_1_0 = (CrossReference)cSourceAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cSourceIntentionalElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSourceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDestAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cDestIntentionalElementCrossReference_3_1_1_0 = (CrossReference)cDestAssignment_3_1_1.eContents().get(0);
		private final RuleCall cDestIntentionalElementIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conflict:
		//	"Conflict" name=ID "[" ("dest" source=[IntentionalElement] & "source" dest=[IntentionalElement]) "]";
		@Override public ParserRule getRule() { return rule; }

		//"Conflict" name=ID "[" ("dest" source=[IntentionalElement] & "source" dest=[IntentionalElement]) "]"
		public Group getGroup() { return cGroup; }

		//"Conflict"
		public Keyword getConflictKeyword_0() { return cConflictKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"dest" source=[IntentionalElement] & "source" dest=[IntentionalElement]
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"dest" source=[IntentionalElement]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"dest"
		public Keyword getDestKeyword_3_0_0() { return cDestKeyword_3_0_0; }

		//source=[IntentionalElement]
		public Assignment getSourceAssignment_3_0_1() { return cSourceAssignment_3_0_1; }

		//[IntentionalElement]
		public CrossReference getSourceIntentionalElementCrossReference_3_0_1_0() { return cSourceIntentionalElementCrossReference_3_0_1_0; }

		//ID
		public RuleCall getSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1() { return cSourceIntentionalElementIDTerminalRuleCall_3_0_1_0_1; }

		//"source" dest=[IntentionalElement]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"source"
		public Keyword getSourceKeyword_3_1_0() { return cSourceKeyword_3_1_0; }

		//dest=[IntentionalElement]
		public Assignment getDestAssignment_3_1_1() { return cDestAssignment_3_1_1; }

		//[IntentionalElement]
		public CrossReference getDestIntentionalElementCrossReference_3_1_1_0() { return cDestIntentionalElementCrossReference_3_1_1_0; }

		//ID
		public RuleCall getDestIntentionalElementIDTerminalRuleCall_3_1_1_0_1() { return cDestIntentionalElementIDTerminalRuleCall_3_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cGoalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDescriptionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_4_0 = (RuleCall)cDescriptionAssignment_0_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cUnorderedGroup.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cPriorityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_1_1_0 = (RuleCall)cPriorityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCostAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_3_1_0 = (RuleCall)cCostAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cBenefitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBenefitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBenefitINTTerminalRuleCall_4_1_0 = (RuleCall)cBenefitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cCompletionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDateAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cDelayCostKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCodAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_6_1_0 = (RuleCall)cCodAssignment_6_1.eContents().get(0);
		private final Assignment cRationaleAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cRationaleRationaleParserRuleCall_7_0 = (RuleCall)cRationaleAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cUnorderedGroup.eContents().get(8);
		private final Assignment cRefAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cRefReferenceParserRuleCall_8_0_0 = (RuleCall)cRefAssignment_8_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Goal:
		//	"Goal" name=ID (":" title=STRING)? // short string for title
		//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? "]";
		@Override public ParserRule getRule() { return rule; }

		//"Goal" name=ID (":" title=STRING)? // short string for title
		//"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? "]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Goal" name=ID (":" title=STRING)? // short string for title
		//"[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Goal"
		public Keyword getGoalKeyword_0_0() { return cGoalKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_3() { return cLeftSquareBracketKeyword_0_3; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_4() { return cDescriptionAssignment_0_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_4_0() { return cDescriptionDescriptionParserRuleCall_0_4_0; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_1_1() { return cPriorityAssignment_1_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_1_1_0() { return cPriorityPriorityEnumEnumRuleCall_1_1_0; }

		//("time" time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"cost"
		public Keyword getCostKeyword_3_0() { return cCostKeyword_3_0; }

		//cost=INT
		public Assignment getCostAssignment_3_1() { return cCostAssignment_3_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_3_1_0() { return cCostINTTerminalRuleCall_3_1_0; }

		//("benefit" benefit=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"benefit"
		public Keyword getBenefitKeyword_4_0() { return cBenefitKeyword_4_0; }

		//benefit=INT
		public Assignment getBenefitAssignment_4_1() { return cBenefitAssignment_4_1; }

		//INT
		public RuleCall getBenefitINTTerminalRuleCall_4_1_0() { return cBenefitINTTerminalRuleCall_4_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"completion"
		public Keyword getCompletionKeyword_5_0() { return cCompletionKeyword_5_0; }

		//date=STRING
		public Assignment getDateAssignment_5_1() { return cDateAssignment_5_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_1_0() { return cDateSTRINGTerminalRuleCall_5_1_0; }

		//("delay cost" cod=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"delay cost"
		public Keyword getDelayCostKeyword_6_0() { return cDelayCostKeyword_6_0; }

		//cod=INT
		public Assignment getCodAssignment_6_1() { return cCodAssignment_6_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_6_1_0() { return cCodINTTerminalRuleCall_6_1_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_7() { return cRationaleAssignment_7; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_7_0() { return cRationaleRationaleParserRuleCall_7_0; }

		//ref=Reference? "]"
		public Group getGroup_8() { return cGroup_8; }

		//ref=Reference?
		public Assignment getRefAssignment_8_0() { return cRefAssignment_8_0; }

		//Reference
		public RuleCall getRefReferenceParserRuleCall_8_0_0() { return cRefReferenceParserRuleCall_8_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8_1() { return cRightSquareBracketKeyword_8_1; }
	}

	public class SoftgoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Softgoal");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cSoftgoalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDescriptionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_4_0 = (RuleCall)cDescriptionAssignment_0_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cUnorderedGroup.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cPriorityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_1_1_0 = (RuleCall)cPriorityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCostAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_3_1_0 = (RuleCall)cCostAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cBenefitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBenefitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBenefitINTTerminalRuleCall_4_1_0 = (RuleCall)cBenefitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cCompletionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDateAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cDelayCostKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCodAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_6_1_0 = (RuleCall)cCodAssignment_6_1.eContents().get(0);
		private final Assignment cRationaleAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cRationaleRationaleParserRuleCall_7_0 = (RuleCall)cRationaleAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cUnorderedGroup.eContents().get(8);
		private final Assignment cRefAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cRefReferenceParserRuleCall_8_0_0 = (RuleCall)cRefAssignment_8_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Softgoal:
		//	"Softgoal" name=ID (":" title=STRING)? // short string for title
		//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? //the document e.g. business strategy
		//	"]";
		@Override public ParserRule getRule() { return rule; }

		//"Softgoal" name=ID (":" title=STRING)? // short string for title
		//"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? //the document e.g. business strategy
		//"]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Softgoal" name=ID (":" title=STRING)? // short string for title
		//"[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Softgoal"
		public Keyword getSoftgoalKeyword_0_0() { return cSoftgoalKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_3() { return cLeftSquareBracketKeyword_0_3; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_4() { return cDescriptionAssignment_0_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_4_0() { return cDescriptionDescriptionParserRuleCall_0_4_0; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_1_1() { return cPriorityAssignment_1_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_1_1_0() { return cPriorityPriorityEnumEnumRuleCall_1_1_0; }

		//("time" time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"cost"
		public Keyword getCostKeyword_3_0() { return cCostKeyword_3_0; }

		//cost=INT
		public Assignment getCostAssignment_3_1() { return cCostAssignment_3_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_3_1_0() { return cCostINTTerminalRuleCall_3_1_0; }

		//("benefit" benefit=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"benefit"
		public Keyword getBenefitKeyword_4_0() { return cBenefitKeyword_4_0; }

		//benefit=INT
		public Assignment getBenefitAssignment_4_1() { return cBenefitAssignment_4_1; }

		//INT
		public RuleCall getBenefitINTTerminalRuleCall_4_1_0() { return cBenefitINTTerminalRuleCall_4_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"completion"
		public Keyword getCompletionKeyword_5_0() { return cCompletionKeyword_5_0; }

		//date=STRING
		public Assignment getDateAssignment_5_1() { return cDateAssignment_5_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_1_0() { return cDateSTRINGTerminalRuleCall_5_1_0; }

		//("delay cost" cod=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"delay cost"
		public Keyword getDelayCostKeyword_6_0() { return cDelayCostKeyword_6_0; }

		//cod=INT
		public Assignment getCodAssignment_6_1() { return cCodAssignment_6_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_6_1_0() { return cCodINTTerminalRuleCall_6_1_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_7() { return cRationaleAssignment_7; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_7_0() { return cRationaleRationaleParserRuleCall_7_0; }

		//ref=Reference? //the document e.g. business strategy
		//"]"
		public Group getGroup_8() { return cGroup_8; }

		//ref=Reference?
		public Assignment getRefAssignment_8_0() { return cRefAssignment_8_0; }

		//Reference
		public RuleCall getRefReferenceParserRuleCall_8_0_0() { return cRefReferenceParserRuleCall_8_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8_1() { return cRightSquareBracketKeyword_8_1; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cTaskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTitleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cTitleAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDescriptionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_0_4_0 = (RuleCall)cDescriptionAssignment_0_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cUnorderedGroup.eContents().get(1);
		private final Keyword cPriorityKeyword_1_0 = (Keyword)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cPriorityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cPriorityPriorityEnumEnumRuleCall_1_1_0 = (RuleCall)cPriorityAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCostAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCostINTTerminalRuleCall_3_1_0 = (RuleCall)cCostAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cBenefitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBenefitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBenefitINTTerminalRuleCall_4_1_0 = (RuleCall)cBenefitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cCompletionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDateAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cDelayCostKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cCodAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cCodINTTerminalRuleCall_6_0_1_0 = (RuleCall)cCodAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Task:
		//	"Task" name=ID (":" title=STRING)? "[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		//	//TODO: validate in custom validator
		//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//	("completion" date=STRING)? & ("delay cost" cod=INT)? "]";
		@Override public ParserRule getRule() { return rule; }

		//"Task" name=ID (":" title=STRING)? "[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
		////TODO: validate in custom validator
		//& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
		//("completion" date=STRING)? & ("delay cost" cod=INT)? "]"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Task" name=ID (":" title=STRING)? "[" description=Description?
		public Group getGroup_0() { return cGroup_0; }

		//"Task"
		public Keyword getTaskKeyword_0_0() { return cTaskKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//(":" title=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_0_2_1() { return cTitleAssignment_0_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_2_1_0() { return cTitleSTRINGTerminalRuleCall_0_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_3() { return cLeftSquareBracketKeyword_0_3; }

		//description=Description?
		public Assignment getDescriptionAssignment_0_4() { return cDescriptionAssignment_0_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_0_4_0() { return cDescriptionDescriptionParserRuleCall_0_4_0; }

		//("priority" & priority=PriorityEnum)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"priority"
		public Keyword getPriorityKeyword_1_0() { return cPriorityKeyword_1_0; }

		//priority=PriorityEnum
		public Assignment getPriorityAssignment_1_1() { return cPriorityAssignment_1_1; }

		//PriorityEnum
		public RuleCall getPriorityPriorityEnumEnumRuleCall_1_1_0() { return cPriorityPriorityEnumEnumRuleCall_1_1_0; }

		//("time" time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("cost" cost=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"cost"
		public Keyword getCostKeyword_3_0() { return cCostKeyword_3_0; }

		//cost=INT
		public Assignment getCostAssignment_3_1() { return cCostAssignment_3_1; }

		//INT
		public RuleCall getCostINTTerminalRuleCall_3_1_0() { return cCostINTTerminalRuleCall_3_1_0; }

		//("benefit" benefit=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"benefit"
		public Keyword getBenefitKeyword_4_0() { return cBenefitKeyword_4_0; }

		//benefit=INT
		public Assignment getBenefitAssignment_4_1() { return cBenefitAssignment_4_1; }

		//INT
		public RuleCall getBenefitINTTerminalRuleCall_4_1_0() { return cBenefitINTTerminalRuleCall_4_1_0; }

		//("completion" date=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"completion"
		public Keyword getCompletionKeyword_5_0() { return cCompletionKeyword_5_0; }

		//date=STRING
		public Assignment getDateAssignment_5_1() { return cDateAssignment_5_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_1_0() { return cDateSTRINGTerminalRuleCall_5_1_0; }

		//("delay cost" cod=INT)? "]"
		public Group getGroup_6() { return cGroup_6; }

		//("delay cost" cod=INT)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"delay cost"
		public Keyword getDelayCostKeyword_6_0_0() { return cDelayCostKeyword_6_0_0; }

		//cod=INT
		public Assignment getCodAssignment_6_0_1() { return cCodAssignment_6_0_1; }

		//INT
		public RuleCall getCodINTTerminalRuleCall_6_0_1_0() { return cCodINTTerminalRuleCall_6_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Description:
		//	"description" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"description" text=STRING
		public Group getGroup() { return cGroup; }

		//"description"
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class RationaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rationale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRationaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Rationale:
		//	"rationale" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"rationale" text=STRING
		public Group getGroup() { return cGroup; }

		//"rationale"
		public Keyword getRationaleKeyword_0() { return cRationaleKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeeDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDocReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocReferenceSTRINGTerminalRuleCall_1_0 = (RuleCall)cDocReferenceAssignment_1.eContents().get(0);
		
		//Reference:
		//	"see document" docReference+=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"see document" docReference+=STRING
		public Group getGroup() { return cGroup; }

		//"see document"
		public Keyword getSeeDocumentKeyword_0() { return cSeeDocumentKeyword_0; }

		//docReference+=STRING
		public Assignment getDocReferenceAssignment_1() { return cDocReferenceAssignment_1; }

		//STRING
		public RuleCall getDocReferenceSTRINGTerminalRuleCall_1_0() { return cDocReferenceSTRINGTerminalRuleCall_1_0; }
	}

	public class PreferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFirstIntentionalElementCrossReference_1_0 = (CrossReference)cFirstAssignment_1.eContents().get(0);
		private final RuleCall cFirstIntentionalElementIDTerminalRuleCall_1_0_1 = (RuleCall)cFirstIntentionalElementCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLastAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLastIntentionalElementCrossReference_3_0 = (CrossReference)cLastAssignment_3.eContents().get(0);
		private final RuleCall cLastIntentionalElementIDTerminalRuleCall_3_0_1 = (RuleCall)cLastIntentionalElementCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODO: Semantic validation that first/last exist and are not equal
		//Preference:
		//	"prefers(" first=[IntentionalElement] "," last=[IntentionalElement] ")";
		@Override public ParserRule getRule() { return rule; }

		//"prefers(" first=[IntentionalElement] "," last=[IntentionalElement] ")"
		public Group getGroup() { return cGroup; }

		//"prefers("
		public Keyword getPrefersKeyword_0() { return cPrefersKeyword_0; }

		//first=[IntentionalElement]
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//[IntentionalElement]
		public CrossReference getFirstIntentionalElementCrossReference_1_0() { return cFirstIntentionalElementCrossReference_1_0; }

		//ID
		public RuleCall getFirstIntentionalElementIDTerminalRuleCall_1_0_1() { return cFirstIntentionalElementIDTerminalRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//last=[IntentionalElement]
		public Assignment getLastAssignment_3() { return cLastAssignment_3; }

		//[IntentionalElement]
		public CrossReference getLastIntentionalElementCrossReference_3_0() { return cLastIntentionalElementCrossReference_3_0; }

		//ID
		public RuleCall getLastIntentionalElementIDTerminalRuleCall_3_0_1() { return cLastIntentionalElementIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class PriorityEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PriorityEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDMEDKeyword_1_0 = (Keyword)cMEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOWLOWKeyword_2_0 = (Keyword)cLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PriorityEnum:
		//	HIGH | MED | LOW;
		public EnumRule getRule() { return rule; }

		//HIGH | MED | LOW
		public Alternatives getAlternatives() { return cAlternatives; }

		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }

		//"HIGH"
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }

		//MED
		public EnumLiteralDeclaration getMEDEnumLiteralDeclaration_1() { return cMEDEnumLiteralDeclaration_1; }

		//"MED"
		public Keyword getMEDMEDKeyword_1_0() { return cMEDMEDKeyword_1_0; }

		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_2() { return cLOWEnumLiteralDeclaration_2; }

		//"LOW"
		public Keyword getLOWLOWKeyword_2_0() { return cLOWLOWKeyword_2_0; }
	}
	
	private final RoadmapElements pRoadmap;
	private final IntentionalElementElements pIntentionalElement;
	private final RefinementElements pRefinement;
	private final AndRefinementElements pAndRefinement;
	private final OrRefinementElements pOrRefinement;
	private final ConflictElements pConflict;
	private final GoalElements pGoal;
	private final SoftgoalElements pSoftgoal;
	private final TaskElements pTask;
	private final DescriptionElements pDescription;
	private final RationaleElements pRationale;
	private final ReferenceElements pReference;
	private final PriorityEnumElements unknownRulePriorityEnum;
	private final PreferenceElements pPreference;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EEBMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoadmap = new RoadmapElements();
		this.pIntentionalElement = new IntentionalElementElements();
		this.pRefinement = new RefinementElements();
		this.pAndRefinement = new AndRefinementElements();
		this.pOrRefinement = new OrRefinementElements();
		this.pConflict = new ConflictElements();
		this.pGoal = new GoalElements();
		this.pSoftgoal = new SoftgoalElements();
		this.pTask = new TaskElements();
		this.pDescription = new DescriptionElements();
		this.pRationale = new RationaleElements();
		this.pReference = new ReferenceElements();
		this.unknownRulePriorityEnum = new PriorityEnumElements();
		this.pPreference = new PreferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.cmu.sei.eebm.EEBM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
	//Roadmap:
	//	(name="Roadmap" STRING)? components+=IntentionalElement* relations+=(Refinement | Conflict)*;
	public RoadmapElements getRoadmapAccess() {
		return pRoadmap;
	}
	
	public ParserRule getRoadmapRule() {
		return getRoadmapAccess().getRule();
	}

	//// superclass. Implies Goals and Options are semantically equivalent ...
	//IntentionalElement:
	//	Goal | Task | Softgoal;
	public IntentionalElementElements getIntentionalElementAccess() {
		return pIntentionalElement;
	}
	
	public ParserRule getIntentionalElementRule() {
		return getIntentionalElementAccess().getRule();
	}

	////Relationship:
	////	Refinement | Conflict
	////;
	////TODO: validation rule that defines what can be refined/decomposed.
	//// E.g. softgoals refine other Sgs, goals refine goals or softgoals, tasks refine either.
	////Notice there is little to no semantic difference between them!
	//Refinement:
	//	AndRefinement | OrRefinement;
	public RefinementElements getRefinementAccess() {
		return pRefinement;
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}

	//AndRefinement:
	//	"And" name=ID "[" ("dest" source+=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] (","
	//	dest+=[IntentionalElement])* "]") "]";
	public AndRefinementElements getAndRefinementAccess() {
		return pAndRefinement;
	}
	
	public ParserRule getAndRefinementRule() {
		return getAndRefinementAccess().getRule();
	}

	//OrRefinement:
	//	"Or" name=ID "[" ("dest" source=[IntentionalElement] & "source" "[" dest+=[IntentionalElement] (","
	//	dest+=[IntentionalElement])* "]") "]";
	public OrRefinementElements getOrRefinementAccess() {
		return pOrRefinement;
	}
	
	public ParserRule getOrRefinementRule() {
		return getOrRefinementAccess().getRule();
	}

	//Conflict:
	//	"Conflict" name=ID "[" ("dest" source=[IntentionalElement] & "source" dest=[IntentionalElement]) "]";
	public ConflictElements getConflictAccess() {
		return pConflict;
	}
	
	public ParserRule getConflictRule() {
		return getConflictAccess().getRule();
	}

	//Goal:
	//	"Goal" name=ID (":" title=STRING)? // short string for title
	//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
	//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? "]";
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//Softgoal:
	//	"Softgoal" name=ID (":" title=STRING)? // short string for title
	//	"[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
	//	("completion" date=STRING)? & ("delay cost" cod=INT)? & rationale=Rationale? & ref=Reference? //the document e.g. business strategy
	//	"]";
	public SoftgoalElements getSoftgoalAccess() {
		return pSoftgoal;
	}
	
	public ParserRule getSoftgoalRule() {
		return getSoftgoalAccess().getRule();
	}

	//Task:
	//	"Task" name=ID (":" title=STRING)? "[" description=Description? //TODO: Validation should implement what an integer time reflects, e.g.seconds, weeks
	//	//TODO: validate in custom validator
	//	& ("priority" & priority=PriorityEnum)? & ("time" time=INT)? & ("cost" cost=INT)? & ("benefit" benefit=INT)? &
	//	("completion" date=STRING)? & ("delay cost" cod=INT)? "]";
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//Description:
	//	"description" text=STRING;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//Rationale:
	//	"rationale" text=STRING;
	public RationaleElements getRationaleAccess() {
		return pRationale;
	}
	
	public ParserRule getRationaleRule() {
		return getRationaleAccess().getRule();
	}

	//Reference:
	//	"see document" docReference+=STRING;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//enum PriorityEnum:
	//	HIGH | MED | LOW;
	public PriorityEnumElements getPriorityEnumAccess() {
		return unknownRulePriorityEnum;
	}
	
	public EnumRule getPriorityEnumRule() {
		return getPriorityEnumAccess().getRule();
	}

	////TODO: Semantic validation that first/last exist and are not equal
	//Preference:
	//	"prefers(" first=[IntentionalElement] "," last=[IntentionalElement] ")";
	public PreferenceElements getPreferenceAccess() {
		return pPreference;
	}
	
	public ParserRule getPreferenceRule() {
		return getPreferenceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
